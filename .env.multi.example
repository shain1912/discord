# 로드 밸런싱 기반 다중 인스턴스 환경 변수 템플릿
# 진짜 4배 성능 향상을 위한 API 키 분산 활용

# Discord Bot Token (공통 - 모든 인스턴스가 동일한 토큰 사용)
DISCORD_TOKEN=your_discord_bot_token_here

# Instance 1 API Keys (전용 키 세트)
OPENAI_API_KEY_1=sk-your_openai_key_instance_1
MINIMAX_API_KEY_1=eyJ_your_minimax_key_instance_1
STABILITY_API_KEY_1=sk-your_stability_key_instance_1

# Instance 2 API Keys (전용 키 세트)
OPENAI_API_KEY_2=sk-your_openai_key_instance_2
MINIMAX_API_KEY_2=eyJ_your_minimax_key_instance_2
STABILITY_API_KEY_2=sk-your_stability_key_instance_2

# Instance 3 API Keys (전용 키 세트)
OPENAI_API_KEY_3=sk-your_openai_key_instance_3
MINIMAX_API_KEY_3=eyJ_your_minimax_key_instance_3
STABILITY_API_KEY_3=sk-your_stability_key_instance_3

# Instance 4 API Keys (전용 키 세트)
OPENAI_API_KEY_4=sk-your_openai_key_instance_4
MINIMAX_API_KEY_4=eyJ_your_minimax_key_instance_4
STABILITY_API_KEY_4=sk-your_stability_key_instance_4

# 로드 밸런싱 설정
TOTAL_INSTANCES=4
LOAD_BALANCING_STRATEGY=user_based
FAILOVER_ENABLED=true

# 성능 최적화 설정 (로드 밸런싱으로 쿨다운 최소화)
CHAT_COOLDOWN=0
IMAGE_COOLDOWN=0
VIDEO_COOLDOWN=2

# 높은 일일 제한 (인스턴스당 높은 한계)
CHAT_DAILY_LIMIT=10000
IMAGE_DAILY_LIMIT=800
VIDEO_DAILY_LIMIT=160

# 로그 설정
LOG_LEVEL=INFO

# Docker 환경 설정
DOCKER_ENV=true

# 헬스체크 설정
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3

# 네트워크 설정
SUBNET=172.20.0.0/16

# 성능 모니터링
ENABLE_MONITORING=false
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000

# 백업 설정 (Instance 4가 담당)
BACKUP_ENABLED=true
BACKUP_INTERVAL=24h

# ==========================================
# 🚀 성능 향상 효과 (로드 밸런싱 방식)
# ==========================================
# 
# 동시 처리: 10개 → 40개 (4배)
# 응답 속도: 5-10초 → 2-5초 (2배 빠름)
# API 레이트 리미트: 모든 키 동시 활용으로 4배 증가
# 
# OpenAI: 3,500 RPM → 14,000 RPM (4배)
# MiniMax: 100 RPD → 400 RPD (4배)
# Stability: 100 RPM → 400 RPM (4배)
# 
# 사용자 분산: User ID % 4 + 1
# - User ID 끝자리 0,4,8 → Instance 1
# - User ID 끝자리 1,5,9 → Instance 2  
# - User ID 끝자리 2,6 → Instance 3
# - User ID 끝자리 3,7 → Instance 4
# ==========================================
